@page "/"
@page "/{ChatRoomId:int?}"
@using ReenbitTest.UI.Components
@using ReenbitTest.UI.Interfaces
@using ReenbitTest.UI.Models
@using System.Text.Json
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@inject IChatHubService ChatHubService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ReenbitTest.UI.Services.NavbarEventService NavbarEventService
@inject IDialogService DialogService
@implements IAsyncDisposable

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-0 px-0" Style="height: 100vh;">
    <MudPaper Class="d-flex flex-row h-100" Style="height: 100%; border-radius: 8px;" Elevation="0">
        <!-- Chat Area -->
        <MudPaper Elevation="0" Class="flex-grow-1 d-flex flex-column" Style="position: relative; background-color: var(--mud-palette-background);">
            @if (_selectedChatRoom == null)
            {
                <MudPaper Class="d-flex justify-center align-center" Style="height: 100%; background-color: var(--mud-palette-background);" Elevation="0">
                    <MudText Typo="Typo.h6" Color="Color.Secondary">Select a chat or create a new one</MudText>
                </MudPaper>
            }
            else
            {
                <MudPaper Elevation="0" Class="d-flex flex-column h-100" Style="background-color: var(--mud-palette-background);">
                    <!-- Chat Header - Fixed to the top -->
                    <MudAppBar Color="Color.Primary" Fixed="true" Dense="false" Elevation="1" Class="flex-row align-center px-4" Style="border-bottom: 1px solid var(--mud-palette-lines-default);">
                        <!-- Mobile menu drawer button -->
                        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" 
                            OnClick="@ToggleNavbar" 
                            Class="mr-3 d-md-none" />
                        
                        <div class="d-flex flex-column flex-grow-1" style="text-align: left;">
                            @if (_isLoadingMessages)
                            {
                                <MudText Typo="Typo.h6" Style="color: white;">
                                    <MudSkeleton Width="140px" Animation="Animation.Wave" />
                                </MudText>
                                <MudText Typo="Typo.caption" Style="color: white;">
                                    <MudSkeleton Width="80px" Animation="Animation.Wave" />
                                </MudText>
                            }
                            else
                            {
                                <MudButton 
                                    Typo="Typo.h3" 
                                    Color="Color.Inherit" 
                                    OnClick="OpenAddUserDialog" 
                                    Style="color: white; text-transform: none; padding: 0; font-weight: 600; width: 100px; text-align: left;">
                                    @_selectedChatRoom.Name
                                </MudButton>
                
                                @if (_typingUsers.Any())
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @GetTypingText()
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @(_selectedChatRoom.Users.Count) members
                                    </MudText>
                                }
                            }
                        </div>
                    </MudAppBar>
                    
                    <!-- Spacer to account for fixed AppBar -->
                    <div style="height: 64px;"></div>

                    <!-- Chat Messages -->
                    <MudPaper id="messages-container" Elevation="0" Class="flex-grow-1 overflow-y-auto pa-4" @ref="_messagesContainerRef" Style="margin-bottom: 76px; background-color: var(--mud-palette-background);">
                        @if (_isLoadingMessages)
                        {
                            <div class="d-flex flex-column align-center justify-center" style="height: 100%;">
                                <MudProgressLinear Color="Color.Secondary" Striped="true" Size="Size.Medium" Indeterminate="true" Class="my-7" Style="max-width: 300px;" />
                                <MudText Align="Align.Center" Color="Color.Secondary" Class="mt-2">Loading messages...</MudText>
                            </div>
                        }
                        else if (_messages.Count == 0)
                        {
                            <MudText Align="Align.Center" Color="Color.Secondary" Class="my-4">No messages yet</MudText>
                        }
                        else
                        {
                            <div class="d-flex flex-column">
                                @{
                                    var currentDate = DateTime.MinValue;
                                    var groupedMessages = _messages.OrderBy(m => m.SentAt).ToList();

                                    for (int i = 0; i < groupedMessages.Count; i++)
                                    {
                                        var message = groupedMessages[i];
                                        var isFirstInGroup = i == 0 || groupedMessages[i - 1].SenderUserName != message.SenderUserName;
                                        
                                        <div class="d-flex @(message.IsCurrentUser ? "flex-row-reverse" : "flex-row")" style="margin-bottom: 12px;">
                                            @if (isFirstInGroup && !message.IsCurrentUser)
                                            {
                                                <MudAvatar Color="Color.Secondary" Class="mr-2 mt-1" Size="Size.Small" Style="background-color: var(--mud-palette-secondary); color: white;">
                                                    @message.SenderUserName[0]
                                                </MudAvatar>
                                            }
                                            else if (!message.IsCurrentUser)
                                            {
                                                <div style="width: 40px;"></div>
                                            }

                                            <div class="d-flex flex-column @(message.IsCurrentUser ? "align-end" : "align-start")" style="max-width: 80%;">
                                                @if (isFirstInGroup && !message.IsCurrentUser)
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-1 ml-1">@message.SenderFullName</MudText>
                                                }
                                                
                                                <MudPaper Elevation="1" 
                                                        Class="@($"pa-3 rounded-lg position-relative {(message.IsCurrentUser ? "mud-theme-primary" : "mud-theme-tertiary")}")"
                                                        Style="@($"{(message.IsCurrentUser ? "border-top-right-radius: 4px;" : "border-top-left-radius: 4px;")} min-width: 120px;")">
                                                    
                                                    <!-- Message content -->
                                                    <MudText Style="@(message.IsCurrentUser ? "color: white" : "color: #273F4F")">@message.Content</MudText>
                                                    
                                                    <!-- Time and sentiment badge -->
                                                    <div class="d-flex justify-end align-center mt-1">
                                                        <MudText Typo="Typo.caption" Style="@(message.IsCurrentUser ? "color: white; opacity: 0.8;" : "color: #273F4F; opacity: 0.8;")" Class="mr-1">
                                                            @message.SentAt.ToString("t")
                                                        </MudText>
                                                        
                                                        @if (!string.IsNullOrEmpty(message.SentimentLabel))
                                                        {
                                                            <MudIcon Icon="@GetSentimentIcon(message.SentimentLabel)" 
                                                                    Color="@GetSentimentColor(message.SentimentLabel)" 
                                                                    Size="Size.Small" />
                                                        }
                                                    </div>
                                                </MudPaper>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </MudPaper>

                    <!-- Message Input - Fixed to the bottom -->
                    <MudAppBar Color="Color.Primary" Elevation="3" Class="py-3 px-4" Bottom Fixed="true" Style="border-top: 1px solid var(--mud-palette-lines-default);">
                        <MudGrid Spacing="2" Class="ma-0 pa-0">
                            <MudItem xs="10" sm="11">
                                <MudTextField @ref="_messageInputRef"
                                    @bind-Value="_newMessage"
                                    Placeholder="Type your message..."
                                    Variant="Variant.Outlined"
                                    Immediate="true"
                                    OnKeyDown="HandleKeyDown"
                                    TextChanged="HandleInputChange"
                                    Disabled="@(!ChatHubService.IsConnected || _selectedChatRoom == null)"
                                    FullWidth="true"
                                    Class="message-input"
                                    InputStyle="color: white !important;"
                                    AdornmentColor="Color.Secondary" />
                            </MudItem>
                            <MudItem xs="2" sm="1" Class="d-flex align-center justify-center">
                                <MudIconButton Color="Color.Primary"
                                            Size="Size.Medium"
                                            Icon="@Icons.Material.Filled.Send"
                                            OnClick="SendMessage"
                                            Disabled="@(string.IsNullOrWhiteSpace(_newMessage) || !ChatHubService.IsConnected || _selectedChatRoom == null)"
                                            Style="background-color: var(--mud-palette-secondary); color: white;" />
                            </MudItem>
                        </MudGrid>
                    </MudAppBar>
                </MudPaper>
            }
        </MudPaper>
    </MudPaper>
</MudContainer>

<style>
    .message-input .mud-input-outlined-border {
        border-color: var(--mud-palette-lines-default) !important;
    }
    
    .message-input .mud-input:hover:not(.mud-input-disabled) .mud-input-outlined-border {
        border-color: var(--mud-palette-secondary) !important;
    }
    
    .message-input .mud-input:focus-within .mud-input-outlined-border {
        border-color: var(--mud-palette-secondary) !important;
        border-width: 2px !important;
    }
    
    .mud-paper.mud-theme-tertiary {
        background-color: var(--mud-palette-tertiary) !important;
        border: 1px solid var(--mud-palette-lines-default);
    }
    
    .mud-paper.mud-theme-primary {
        background-color: var(--mud-palette-primary) !important;
        color: white !important;
    }
    @@media (max-width: 600px) {
        .message-input {
            min-width: 0;
            width: 100%;
        }
        
        .mud-grid-item.xs-10 {
            padding-right: 8px;
        }
    }
</style>

@code {
    [Parameter]
    public int? ChatRoomId { get; set; }

    private ChatRoom? _selectedChatRoom;
    private List<Message> _messages = new();
    private Dictionary<string, string> _typingUsers = new();
    private string _newMessage = "";
    private bool _isLoadingMessages = false;
    private bool _isUserTyping = false;
    private DateTime _lastTypingNotification = DateTime.MinValue;
    private System.Threading.Timer? _typingTimer;
    private bool _connectionInitialized = false;
    private MudTextField<string>? _messageInputRef;
    private MudPaper? _messagesContainerRef;
    private int _currentPage = 1;
    private const int PageSize = 20;
    private bool _allMessagesLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        if (ChatRoomId.HasValue)
        {
            await LoadChatRoom(ChatRoomId.Value);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ChatRoomId.HasValue && (_selectedChatRoom == null || _selectedChatRoom.Id != ChatRoomId.Value))
        {
            await LoadChatRoom(ChatRoomId.Value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AuthService.IsAuthenticated && !_connectionInitialized)
        {
            await InitializeHubConnection();
        }

        await ScrollToBottomAsync();
    }

    private async Task InitializeHubConnection()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
                return;

            await ChatHubService.StartConnectionAsync(token);
            
            ChatHubService.OnReceiveMessage += HandleReceiveMessage;
            ChatHubService.OnLoadRecentMessages += HandleLoadRecentMessages;
            ChatHubService.OnUserTyping += HandleUserTyping;
            ChatHubService.OnUserStoppedTyping += HandleUserStoppedTyping;
            ChatHubService.OnUserJoined += HandleUserJoined;
            ChatHubService.OnUserLeft += HandleUserLeft;
            ChatHubService.OnError += HandleError;

            _connectionInitialized = true;

            // Join the chat room if already selected
            if (_selectedChatRoom != null)
            {
                await ChatHubService.JoinChatRoomAsync(_selectedChatRoom.Id);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Connection error: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadChatRoom(int chatRoomId)
    {
        try
        {
            _messages.Clear();
            _currentPage = 1;
            _allMessagesLoaded = false;
            _isLoadingMessages = true;
            StateHasChanged();
            _selectedChatRoom = await ChatService.GetChatRoomAsync(chatRoomId);
            await LoadMessages();

            if (_connectionInitialized)
            {
                await ChatHubService.JoinChatRoomAsync(chatRoomId);
            }
        }
        catch (Exception ex)
        {
            _isLoadingMessages = false;
            Snackbar.Add($"Error loading chat: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadMessages()
    {
        if (_selectedChatRoom == null || _allMessagesLoaded)
            return;

        try
        {
            _isLoadingMessages = true;
            var messages = await ChatService.GetMessagesForChatRoomAsync(_selectedChatRoom.Id, _currentPage, PageSize);
            
            if (messages.Count == 0 || messages.Count < PageSize)
            {
                _allMessagesLoaded = true;
            }

            _messages.AddRange(messages);
            _currentPage++;
            _isLoadingMessages = false;
        }
        catch (Exception ex)
        {
            _isLoadingMessages = false;
            Snackbar.Add($"Error loading messages: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleChatSelected(int chatRoomId)
    {
        if (_selectedChatRoom?.Id == chatRoomId)
            return;

        // Leave current chat room if any
        if (_selectedChatRoom != null && ChatHubService.IsConnected)
        {
            await ChatHubService.LeaveChatRoomAsync(_selectedChatRoom.Id);
        }

        await LoadChatRoom(chatRoomId);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage) || _selectedChatRoom == null || !ChatHubService.IsConnected)
            return;

        try
        {
            var message = new CreateMessage
            {
                Content = _newMessage.Trim(),
                ChatRoomId = _selectedChatRoom.Id
            };

            await ChatHubService.SendMessageAsync(message);
            _newMessage = "";

            // Notify stopped typing
            await NotifyStoppedTypingAsync();
            
            // Focus the input field
            if (_messageInputRef != null) 
            {
                await _messageInputRef.FocusAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error sending message: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task HandleInputChange(string value)
    {
        if (_selectedChatRoom == null || !ChatHubService.IsConnected)
            return;

        var now = DateTime.Now;
        if (!_isUserTyping || (now - _lastTypingNotification).TotalSeconds > 2)
        {
            _isUserTyping = true;
            _lastTypingNotification = now;
            
            try
            {
                Console.WriteLine($"User typing in chat room: {_selectedChatRoom.Id}");
                await ChatHubService.NotifyUserTypingAsync(_selectedChatRoom.Id);
                
                // Reset typing timer
                _typingTimer?.Dispose();
                _typingTimer = new System.Threading.Timer(
                    async _ => await InvokeAsync(NotifyStoppedTypingAsync), 
                    null, 
                    3000, 
                    Timeout.Infinite);
            }
            catch (Exception ex)
            {
                // Log but don't show to user as it's not critical
                Console.WriteLine($"Error in typing notification: {ex.Message}");
            }
        }
    }

    private async Task NotifyStoppedTypingAsync()
    {
        if (_isUserTyping && _selectedChatRoom != null && ChatHubService.IsConnected)
        {
            _isUserTyping = false;
            
            try
            {
                Console.WriteLine($"User stopped typing in chat room: {_selectedChatRoom.Id}");
                await ChatHubService.NotifyUserStoppedTypingAsync(_selectedChatRoom.Id);
            }
            catch (Exception ex)
            {
                // Log but don't show to user as it's not critical
                Console.WriteLine($"Error in stopped typing notification: {ex.Message}");
            }
        }
    }

    private void HandleReceiveMessage(Message message)
    {
        if (_selectedChatRoom?.Id != message.ChatRoomId)
            return;

        // Add message to the list if not already present
        if (!_messages.Any(m => m.Id == message.Id))
        {
            // Set IsCurrentUser flag if the message is from the current user
            if (message.SenderFullName == AuthService.CurrentUser?.FullName)
            {
                message.IsCurrentUser = true;
            }
            
            _messages.Add(message);
            InvokeAsync(StateHasChanged);
            InvokeAsync(ScrollToBottomAsync);
        }
    }

    private void HandleLoadRecentMessages(List<Message> messages)
    {
        if (_selectedChatRoom == null || messages.Count == 0)
            return;

        var chatRoomId = messages.First().ChatRoomId;
        if (_selectedChatRoom.Id != chatRoomId)
            return;

        // Add messages that aren't already in the list
        foreach (var message in messages)
        {
            if (!_messages.Any(m => m.Id == message.Id))
            {
                _messages.Add(message);
            }
        }

        InvokeAsync(StateHasChanged);
        InvokeAsync(ScrollToBottomAsync);
    }

    private void HandleUserTyping(UserTypingInfo typingInfo)
    {
        if (typingInfo.UserId == AuthService.CurrentUser?.Id || _selectedChatRoom?.Id != typingInfo.ChatRoomId)
            return;

        _typingUsers[typingInfo.UserId] = typingInfo.UserName;
        StateHasChanged();
    }

    private void HandleUserStoppedTyping(UserTypingInfo typingInfo)
    {
        if (_typingUsers.ContainsKey(typingInfo.UserId) && _selectedChatRoom?.Id == typingInfo.ChatRoomId)
        {
            _typingUsers.Remove(typingInfo.UserId);
            StateHasChanged();
        }
    }

    private void HandleUserJoined(int chatRoomId, string userId, string userName)
    {
        if (_selectedChatRoom?.Id != chatRoomId || userId == AuthService.CurrentUser?.Id)
            return;

        Snackbar.Add($"{userName} joined the chat", Severity.Info);
    }

    private void HandleUserLeft(int chatRoomId, string userId, string userName)
    {
        if (_selectedChatRoom?.Id != chatRoomId || userId == AuthService.CurrentUser?.Id)
            return;

        Snackbar.Add($"{userName} left the chat", Severity.Info);
    }

    private void HandleError(string error)
    {
        Snackbar.Add(error, Severity.Error);
    }

    private async Task ScrollToBottomAsync()
    {
        if (_messagesContainerRef != null)
        {
            // Small delay to ensure rendering is complete
            await Task.Delay(50); 
            
            await JSRuntime.InvokeVoidAsync("window.scrollFunctions.scrollToBottom");
        }
    }

    private string GetTypingText()
    {
        if (_typingUsers.Count == 0)
            return "";
        else if (_typingUsers.Count == 1)
            return $"{_typingUsers.Values.First()} is typing...";
        else if (_typingUsers.Count == 2)
            return $"{string.Join(" and ", _typingUsers.Values)} are typing...";
        else
            return "Several people are typing...";
    }

    private string GetSentimentIcon(string? sentiment)
    {
        return sentiment?.ToLower() switch
        {
            "positive" => Icons.Material.Filled.SentimentVerySatisfied,
            "negative" => Icons.Material.Filled.SentimentVeryDissatisfied,
            "neutral" => Icons.Material.Filled.SentimentNeutral,
            _ => Icons.Material.Filled.SentimentNeutral
        };
    }

    

    private Color GetSentimentColor(string? sentiment)
    {
        return sentiment?.ToLower() switch
        {
            "positive" => Color.Success,
            "negative" => Color.Error,
            "neutral" => Color.Info,
            _ => Color.Info
        };
    }

    private void ShowChatMembers()
    {
        if (_selectedChatRoom == null)
            return;

        // Here you'd show a dialog with the chat members
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var parameters = new DialogParameters
        {
            ["ChatRoom"] = _selectedChatRoom
        };

        // Assuming you have a MembersDialog component
        // await DialogService.ShowAsync<MembersDialog>("Chat Members", parameters, options);
    }

    private async Task OpenAddUserDialog()
    {
        if (_selectedChatRoom == null) return;
        
        var parameters = new DialogParameters
        {
            ["ChatRoomId"] = _selectedChatRoom.Id,
            ["OnUserAdded"] = EventCallback.Factory.Create<User>(this, HandleUserAdded)
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };
        
        await DialogService.ShowAsync<AddUserToChatDialog>($"{_selectedChatRoom.Name}", parameters, options);
    }

    private async Task HandleUserAdded(User addedUser)
    {
        if (_selectedChatRoom == null) return;
        
        try
        {
            // Refresh chat room to update the users list
            _selectedChatRoom = await ChatService.GetChatRoomAsync(_selectedChatRoom.Id);
            Snackbar.Add($"{addedUser.FullName} was added to the chat", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating chat: {ex.Message}", Severity.Error);
        }
    }

    private async Task LeaveChatRoom()
    {
        if (_selectedChatRoom == null || !ChatHubService.IsConnected)
            return;

        try
        {
            var result = await ChatService.RemoveUserFromChatRoomAsync(_selectedChatRoom.Id, AuthService.CurrentUser!.Id);
            if (result)
            {
                await ChatHubService.LeaveChatRoomAsync(_selectedChatRoom.Id);
                _selectedChatRoom = null;
                _messages.Clear();
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error leaving chat: {ex.Message}", Severity.Error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _typingTimer?.Dispose();
        
        if (_connectionInitialized)
        {
            // Unregister event handlers
            ChatHubService.OnReceiveMessage -= HandleReceiveMessage;
            ChatHubService.OnLoadRecentMessages -= HandleLoadRecentMessages;
            ChatHubService.OnUserTyping -= HandleUserTyping;
            ChatHubService.OnUserStoppedTyping -= HandleUserStoppedTyping;
            ChatHubService.OnUserJoined -= HandleUserJoined;
            ChatHubService.OnUserLeft -= HandleUserLeft;
            ChatHubService.OnError -= HandleError;
            
            // Leave current chat room if any
            if (_selectedChatRoom != null)
            {
                await ChatHubService.LeaveChatRoomAsync(_selectedChatRoom.Id);
            }
        }
    }

    private void ToggleNavbar()
    {
        NavbarEventService.ToggleNavbar();
    }
}