@page "/login"
@using ReenbitTest.UI.Interfaces
@using ReenbitTest.UI.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IChatHubService ChatHubService

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="3" Class="pa-8">
        <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Login</MudText>
        
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudTextField @bind-Value="_email" Label="Email" Variant="Variant.Outlined" 
                        Required="true" RequiredError="Email is required!" Class="mb-4" />
            
            <MudTextField @bind-Value="_password" Label="Password" Variant="Variant.Outlined"
                        Required="true" RequiredError="Password is required!"
                        InputType="@_passwordInputType" Adornment="Adornment.End"
                        AdornmentIcon="@_passwordVisibilityIcon" OnAdornmentClick="TogglePasswordVisibility" Class="mb-4" />
            
            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                    Disabled="@(!_isValid || _isProcessing)" OnClick="ProcessLogin" Class="mt-4">
                @if (_isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Login</MudText>
                }
            </MudButton>
        </MudForm>
        
        <MudDivider Class="my-6" />
        
        <MudText Align="Align.Center">
            Don't have an account? <MudLink Href="/register">Register</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _isValid;
    private bool _isProcessing = false;
    private MudForm? _form;
    
    private InputType _passwordInputType = InputType.Password;
    private string _passwordVisibilityIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (_passwordInputType == InputType.Password)
        {
            _passwordInputType = InputType.Text;
            _passwordVisibilityIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            _passwordInputType = InputType.Password;
            _passwordVisibilityIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task ProcessLogin()
    {
        _isProcessing = true;
        
        try
        {
            var loginRequest = new LoginRequest
            {
                Email = _email,
                Password = _password
            };
            
            var result = await AuthService.Login(loginRequest);
            
            if (result.Success)
            {
                Snackbar.Add("Logged in successfully!", Severity.Success);
                ChatHubService.ResetConnectionState();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                string errorMessage = "Invalid email or password!";
                if (result.Errors != null && result.Errors.Any())
                {
                    errorMessage = string.Join(", ", result.Errors);
                }
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }
}