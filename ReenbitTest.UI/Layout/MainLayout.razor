@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ReenbitTest.UI.Services.NavbarEventService NavbarEventService
@using Microsoft.AspNetCore.Components.Authorization
@using ReenbitTest.UI.Interfaces
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (!_isLoaded)
{
    <MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
    <div class="loading-screen">
        <MudIcon Icon="@Icons.Material.Filled.Chat" Color="Color.Primary" Size="Size.Large" />
        <MudText Typo="Typo.h4" Color="Color.Primary" Class="my-4">Loading ReenbitTest</MudText>
        <MudProgressLinear Color="Color.Primary" Striped="true" Rounded="true" Indeterminate="true" Size="Size.Medium" Class="my-7" Style="width: 30%;" />
    </div>
}
else
{
    <MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudLayout>
        <!-- Mobile Top AppBar - Only visible on screens smaller than md -->
        <MudAppBar Elevation="1" Dense="true" Fixed="true" Class="d-flex d-md-none">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleNavbar" />
            <MudIcon Icon="@Icons.Material.Filled.Chat" Color="Color.Inherit" Size="Size.Medium" Class="ml-2" />
            <MudText Typo="Typo.h6" Class="ml-2">ReenbitTest</MudText>
        </MudAppBar>
        
        <!-- Left Drawer - Always open on desktop, toggleable on smaller screens -->
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Never"
                   Elevation="2" Variant="@_drawerVariant" Style="width: 280px;">
            <NavMenu 
                IsDarkMode="@_isDarkMode" 
                IsDarkModeChanged="DarkModeToggle"
                OnLogout="LogoutUser"
                ActiveSection="@_activeSection" 
                ActiveSectionChanged="@HandleSectionChanged" />
        </MudDrawer>
        
        <MudMainContent>
            <!-- Content with appropriate spacing for different viewports -->
            <div class="content-container px-4 py-4">
                @Body
            </div>
        </MudMainContent>
    </MudLayout>

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">🗙</span>
    </div>
}

<style>
    .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: var(--mud-palette-background);
        z-index: 1000;
    }
    
    /* Fixed responsive styles */
    .content-container {
        transition: margin-left 0.3s;
    }
    
    /* Mobile and medium screens - Navbar either closed or toggled */
    @@media (max-width: 959px) {
        .mud-drawer-open.mud-drawer-left ~ .mud-main-content {
            margin-left: 0 !important;
        }
        
        /* Add top padding only on mobile to account for the AppBar */
        @@media (max-width: 767px) {
            .content-container {
                padding-top: 56px !important; /* Height of dense AppBar */
            }
        }
    }
    
    /* Desktop screens - Navbar always open */
    @@media (min-width: 960px) {
        .mud-drawer {
            position: fixed !important;
            height: 100vh;
        }
        
        .mud-drawer-open.mud-drawer-left ~ .mud-main-content .content-container {
            margin-left: 280px;
        }
    }
</style>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private bool _isLoaded = false;
    private MudTheme? _theme = null;
    private DrawerVariant _drawerVariant = DrawerVariant.Responsive;
    private ReenbitTest.UI.Layout.NavMenu.NavSection _activeSection = ReenbitTest.UI.Layout.NavMenu.NavSection.Chats;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        NavbarEventService.OnNavbarToggle += ToggleNavbar;

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "12px",
                DrawerWidthLeft = "280px",
                DrawerWidthRight = "280px",
                AppbarHeight = "64px",
            },
            Typography = new Typography()
            {
                Default =
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "0.875rem",
                    LineHeight = "1.5"
                },
                H1 = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "2.5rem",
                    FontWeight = "500"
                },
                H2 = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "2rem",
                    FontWeight = "500"
                },
                Button = 
                {
                    FontFamily = new[] { "Ubuntu", "sans-serif" },
                    FontSize = "0.875rem",
                    FontWeight = "500"
                }
            }
        };

        if (OperatingSystem.IsBrowser())
        {
            var storedTheme = await localStorage.GetItemAsync<bool?>("isDarkMode");
            if (storedTheme.HasValue)
            {
                _isDarkMode = storedTheme.Value;
            }

            // Determine initial drawer state based on screen size
            var windowWidth = await JSRuntime!.InvokeAsync<int>("getWindowWidth");
            if (windowWidth >= 960)
            {
                // On desktop, always start with drawer open
                _drawerOpen = true;
            }
            else
            {
                // On mobile/tablet, start with drawer closed
                _drawerOpen = false;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            _isLoaded = true;
            
            // Initialize authentication state from local storage
            await AuthService.InitializeAuthState();
            
            StateHasChanged();
        }
    }

    private void ToggleNavbar()
    {
        _drawerOpen = !_drawerOpen;
        StateHasChanged();
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        
        if (OperatingSystem.IsBrowser())
        {
            await localStorage.SetItemAsync("isDarkMode", _isDarkMode);
        }
    }
    
    private async Task LogoutUser()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }

    private void HandleSectionChanged(ReenbitTest.UI.Layout.NavMenu.NavSection section)
    {
        _activeSection = section;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavbarEventService.OnNavbarToggle -= ToggleNavbar;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        // Main colors from palette
        Primary = "#273F4F",      // Dark blue
        Secondary = "#FE7743",    // Orange
        Tertiary = "#EFEEEA",     // Light cream
        
        // Background colors
        Background = "#EFEEEA",   // Light cream background
        Surface = "#FFFFFF",      // White
        BackgroundGray = "#F5F5F5",
        
        // Appbar
        AppbarText = "#FFFFFF",   // White text for better contrast
        AppbarBackground = "#273F4F", // Dark blue background
        
        // Drawer
        DrawerBackground = "#EFEEEA",
        DrawerText = "#000000",   // Black text
        DrawerIcon = "#273F4F",   // Dark blue icons
        
        // Text colors
        TextPrimary = "#000000",  // Black
        TextSecondary = "#273F4F", // Dark blue
        Black = "#000000",
        White = "#FFFFFF",
        
        // Gray variants
        GrayLight = "#E0E0E0",    // Light gray
        GrayLighter = "#F5F5F5",  // Lighter gray
        
        // Status colors
        Info = "#FFD700",         // Yellow
        Error = "#D32F2F",        // Red (kept for visibility)
        Success = "#2E7D32",      // Green (kept for visibility)
        Warning = "#FE7743",      // Orange
        
        // Action colors
        ActionDefault = "#273F4F", // Dark blue
        ActionDisabled = "#E0E0E0", // Light gray
        ActionDisabledBackground = "#F5F5F5", // Lighter gray
        
        // Line/border colors
        LinesDefault = "#E0E0E0",  // Light gray
        TableLines = "#E0E0E0",    // Light gray
        Divider = "#E0E0E0",       // Light gray
        OverlayLight = "rgba(239,238,234,0.7)", // Light cream overlay
    };

    private readonly PaletteDark _darkPalette = new()
    {
        // Main colors
        Primary = "#273F4F",          // Dark blue (same as light theme)
        Secondary = "#FE7743",        // Orange as secondary accent
        Tertiary = "#EFEEEA",         // Light cream
        
        // Background colors
        Surface = "#000000",          // Pure black
        Background = "#000000",       // Pure black
        BackgroundGray = "#121212",   // Very dark gray, nearly black
        
        // Appbar
        AppbarText = "#FFFFFF",       // White text
        AppbarBackground = "#273F4F", // Dark blue background
        
        // Drawer
        DrawerBackground = "#000000", // Black
        DrawerText = "#FFFFFF",       // White text
        DrawerIcon = "#273F4F",       // Dark blue for icons
        
        // Text colors
        TextPrimary = "#FFFFFF",      // White
        TextSecondary = "#EFEEEA",    // Light cream for secondary text
        TextDisabled = "#4D4D4D",     // Dark gray
        
        // Gray variants
        GrayLight = "#1A1A1A",        // Very dark gray
        GrayLighter = "#2A2A2A",      // Dark gray
        
        // Status colors
        Info = "#FFD700",             // Yellow
        Success = "#2E7D32",          // Green (kept for visibility)
        Warning = "#FE7743",          // Orange
        Error = "#D32F2F",            // Red (kept for visibility)
        
        // Lines/border colors
        LinesDefault = "#1A1A1A",     // Very dark gray
        TableLines = "#1A1A1A",       // Very dark gray
        Divider = "#1A1A1A",          // Very dark gray
        OverlayLight = "rgba(0,0,0,0.7)", // Dark overlay
    };

    [Inject]
    private IJSRuntime? JSRuntime { get; set; }
}