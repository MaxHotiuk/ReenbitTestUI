@using ReenbitTest.UI.Interfaces
@using ReenbitTest.UI.Models
@inject IChatService ChatService
@inject IChatHubService ChatHubService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ReenbitTest.UI.Services.NavbarEventService NavbarEventService

<MudPaper Class="d-flex flex-column h-100" Elevation="0" Square="true">
    <MudToolBar Dense="true" Class="px-2">
        <MudText Typo="Typo.subtitle1" Class="mud-text-truncate">Chats</MudText>
        <MudSpacer />
        <MudTooltip Text="New Chat">
            <MudIconButton Icon="@Icons.Material.Filled.Add" 
                          Size="Size.Small"
                          Color="Color.Primary" 
                          OnClick="OpenNewChatDialog" />
        </MudTooltip>
    </MudToolBar>

    <MudDivider />

    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center my-4">
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        </MudContainer>
    }
    else if (_chatRooms.Count == 0)
    {
        <MudContainer Class="d-flex justify-center align-center my-4">
            <MudText Typo="Typo.caption" Class="text-center mud-text-secondary">
                No chats yet
            </MudText>
        </MudContainer>
    }
    else
    {
        <MudList T="string" Class="overflow-y-auto flex-grow-1 pa-0">
            @foreach (var chat in _chatRooms)
            {
                <MudListItem OnClick="@(() => SelectChat(chat))" 
                            Class="@($"chat-list-item {GetChatItemClass(chat.Id)}")" 
                            Dense="true">
                    <div class="d-flex flex-row">
                        <div class="d-flex flex-column w-100 py-1">
                            <MudAvatar
                                    Color="Color.Primary" 
                                    Size="Size.Medium" 
                                    Class="mr-2" >
                                @chat.Name[0].ToString().ToUpper()
                            </MudAvatar>
                        </div>
                        <div class="d-flex flex-column w-100 py-1">
                            <div style="min-width: 200px;">
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.body2" Class="mud-text-truncate chat-name">
                                        @chat.Name
                                    </MudText>
                                    @if (chat.UnreadCount > 0)
                                    {
                                        <MudBadge Color="Color.Secondary" 
                                                Content="@chat.UnreadCount" 
                                                Overlap="true" 
                                                Max="99" 
                                                Class="unread-badge">
                                        </MudBadge>
                                    }
                                </div>
                                @{
                                    var typingUsersInChat = _typingUsers.Where(t => t.ChatRoomId == chat.Id)
                                                                    .Select(t => t.UserName)
                                                                    .Distinct()
                                                                    .ToList();
                                }
                            </div>
                            
                            @if (typingUsersInChat.Count > 0)
                            {
                                <MudText Typo="Typo.caption" 
                                         Class="mud-text-truncate font-italic" 
                                         Color="Color.Secondary">
                                    @GetTypingText(typingUsersInChat)
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption" 
                                         Class="mud-text-truncate" 
                                         Style="opacity: 0.7;">
                                    @GetLastMessagePreview(chat)
                                </MudText>
                            }
                        </div>
                    </div>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    }
</MudPaper>

<style>
    .chat-list-item {
        min-width: 0; /* Prevent overflow */
    }
    
    .chat-name {
        max-width: calc(100% - 40px); /* Account for badge space */
    }
    
    .unread-badge {
        margin-left: 4px;
    }
</style>

@code {
    [Parameter]
    public EventCallback<int> OnChatSelected { get; set; }

    private bool _isLoading = true;
    private List<ChatRoom> _chatRooms = new();
    private List<UserTypingInfo> _typingUsers = new();
    private int? _selectedChatId;
    private Timer? _typingTimer;
    private bool _connectionInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadChatRooms();

        // Check URL for chat ID
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (int.TryParse(uri.AbsolutePath.Trim('/'), out var chatId))
        {
            await SelectChat(_chatRooms.FirstOrDefault(c => c.Id == chatId));
        }
        
        // Start background chat joining
        _ = JoinChatRoomsInBackgroundAsync();
    }

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthStateChanged;
        base.OnInitialized();
    }

    private async Task JoinChatRoomsInBackgroundAsync()
    {
        try
        {
            foreach (var chatRoom in _chatRooms)
            {
                await ChatHubService.JoinChatRoomAsync(chatRoom.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining chat rooms: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AuthService.IsAuthenticated && !_connectionInitialized)
        {
            await InitializeHubConnection();
        }
    }

    private async Task InitializeHubConnection()
    {
        try
        {
            // Check if there's an existing connection and stop it first
            if (ChatHubService.IsConnected)
            {
                await ChatHubService.StopConnectionAsync();
            }
            
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
                return;

            await ChatHubService.StartConnectionAsync(token);
            
            ChatHubService.OnReceiveMessage += HandleReceiveMessage;
            ChatHubService.OnUserTyping += HandleUserTyping;
            ChatHubService.OnUserStoppedTyping += HandleUserStoppedTyping;
            ChatHubService.OnError += HandleError;

            _connectionInitialized = true;

            // Join all chat rooms
            foreach (var chat in _chatRooms)
            {
                await ChatHubService.JoinChatRoomAsync(chat.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing hub connection: {ex.Message}");
        }
    }

    private string GetTypingText(List<string> typingUsers)
    {
        return typingUsers.Count switch
        {
            1 => $"{typingUsers[0]} is typing...",
            2 => $"{typingUsers[0]} and {typingUsers[1]} are typing...",
            > 2 => $"{typingUsers.Count} people are typing...",
            _ => ""
        };
    }

    private void HandleReceiveMessage(Message message)
    {
        // Find the chat room and update its unread count and last message
        var chatRoom = _chatRooms.FirstOrDefault(c => c.Id == message.ChatRoomId);
        if (chatRoom != null)
        {
            // Update last message
            chatRoom.LastMessage = message.Content;
            
            // Increment unread count if not in current chat and not from current user
            if (!message.IsCurrentUser && _selectedChatId != message.ChatRoomId)
            {
                chatRoom.UnreadCount++;
            }
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void HandleUserTyping(UserTypingInfo typingInfo)
    {
        if (typingInfo.UserId != AuthService.CurrentUser?.Id)
        {
            _typingUsers.Add(new UserTypingInfo
            {
                UserId = typingInfo.UserId,
                UserName = typingInfo.UserName,
                ChatRoomId = typingInfo.ChatRoomId
            });
            InvokeAsync(StateHasChanged);
            
            // Clear typing indicator after 3 seconds of inactivity
            _typingTimer?.Dispose();
            _typingTimer = new Timer(_ => 
            {
                _typingUsers.RemoveAll(u => u.UserId == typingInfo.UserId && u.ChatRoomId == typingInfo.ChatRoomId);
                InvokeAsync(StateHasChanged);
            }, null, 3000, Timeout.Infinite);
        }
    }

    private void HandleUserStoppedTyping(UserTypingInfo typingInfo)
    {
        _typingUsers.RemoveAll(u => u.UserId == typingInfo.UserId && u.ChatRoomId == typingInfo.ChatRoomId);
        InvokeAsync(StateHasChanged);
    }

    private void HandleError(string error)
    {
        Console.WriteLine($"Hub error: {error}");
    }

    private async Task LoadChatRooms()
    {
        try
        {
            _isLoading = true;
            _chatRooms = await ChatService.GetChatRoomsAsync();
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _isLoading = false;
            Console.WriteLine($"Error loading chat rooms: {ex.Message}");
        }
    }

    private async Task SelectChat(ChatRoom? chat)
    {
        if (chat == null || chat.Id == _selectedChatId) return;
        
        _selectedChatId = chat.Id;
        
        // Reset unread count for this chat
        if (chat.UnreadCount > 0)
        {
            chat.UnreadCount = 0;
            // Mark messages as read on the server
            await ChatService.MarkMessagesAsReadAsync(chat.Id);
        }
        
        // Navigate to the chat page with the chat ID
        NavigationManager.NavigateTo($"/{chat.Id}");
        
        // Toggle the navbar closed on small screens
        if (await IsSmallScreenAsync())
        {
            NavbarEventService.ToggleNavbar();
        }
        
        await OnChatSelected.InvokeAsync(chat.Id);
        StateHasChanged();
    }

    // Helper to check screen size
    private async Task<bool> IsSmallScreenAsync()
    {
        try
        {
            // Check if current width is less than 600px (typical small screen breakpoint)
            var windowWidth = await JSRuntime.InvokeAsync<int>("getWindowWidth");
            return windowWidth < 960;
        }
        catch
        {
            // Fallback if JS interop fails
            return false;
        }
    }

    private string GetChatItemClass(int chatId)
    {
        return chatId == _selectedChatId 
            ? "border-left: 3px solid var(--mud-palette-primary); background-color: var(--mud-palette-primary-hover);" 
            : "";
    }

    private string GetLastMessagePreview(ChatRoom chat)
    {
        if (string.IsNullOrEmpty(chat.LastMessage))
            return "No messages";
            
        // Truncate message if too long
        return chat.LastMessage.Length > 30 
            ? chat.LastMessage.Substring(0, 27) + "..." 
            : chat.LastMessage;
    }

    private async Task OpenNewChatDialog()
    {
        var options = new DialogOptions { 
            CloseOnEscapeKey = true, 
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall
        };
        
        var parameters = new DialogParameters
        {
            { "OnChatCreated", EventCallback.Factory.Create<ChatRoom>(this, OnChatCreated) }
        };
        
        await DialogService.ShowAsync<NewChatDialog>("New Chat", parameters, options);
    }

    private async Task OnChatCreated(ChatRoom chatRoom)
    {
        // Add new chat to list
        _chatRooms.Add(chatRoom);
        
        // Join the chat room
        if (ChatHubService.IsConnected)
        {
            await ChatHubService.JoinChatRoomAsync(chatRoom.Id);
        }
        
        // Select the new chat
        await SelectChat(chatRoom);
    }

    private async void AuthStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            // User just logged in
            await LoadChatRooms();
            await InitializeHubConnection();
        }
        else
        {
            // User logged out
            _chatRooms.Clear();
            _selectedChatId = null;
            _connectionInitialized = false;
        }
        
        await InvokeAsync(StateHasChanged);
    }

    public ValueTask DisposeAsync()
    {
        _typingTimer?.Dispose();
        
        if (_connectionInitialized)
        {
            ChatHubService.OnReceiveMessage -= HandleReceiveMessage;
            ChatHubService.OnUserTyping -= HandleUserTyping;
            ChatHubService.OnUserStoppedTyping -= HandleUserStoppedTyping;
            ChatHubService.OnError -= HandleError;
        }
        
        // Unsubscribe from auth state changes
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthStateChanged;

        return ValueTask.CompletedTask;
    }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
}