@using ReenbitTest.UI.Interfaces
@using ReenbitTest.UI.Models
@inject IChatService ChatService
@inject IUserService UserService
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudDialog Style="border-radius: 12px;">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2">Create New Chat</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
            <MudTextField @bind-Value="_chatName" 
                         Label="Chat Name" 
                         Required="true" 
                         RequiredError="Chat name is required"
                         Variant="Variant.Outlined"
                         Class="mb-4" 
                         FullWidth="true"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Chat"
                         AdornmentColor="Color.Primary" />
            
            <MudCard Elevation="0" Outlined="true" Class="mb-4 pa-3" Style="border-radius: 12px; background-color: var(--mud-palette-background-grey);">
                <MudCardHeader Class="pa-0 pb-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Add Participants</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                
                <MudCardContent Class="pa-0">
                    <div class="d-flex gap-2 mb-3">
                        <MudTextField @bind-Value="_searchQuery"
                                     Label="Search users"
                                     Adornment="Adornment.End"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     AdornmentColor="Color.Secondary"
                                     Immediate="true"
                                     OnDebounceIntervalElapsed="SearchUsers"
                                     DebounceInterval="300"
                                     Variant="Variant.Outlined"
                                     Class="flex-grow-1" />
                    </div>

                    @if (_isSearching)
                    {
                        <div class="d-flex justify-center my-4">
                            <MudProgressCircular Size="Size.Medium" Color="Color.Secondary" Indeterminate="true" />
                        </div>
                    }
                    else if (_searchResults.Any())
                    {
                        <MudPaper Elevation="0" Class="pa-2 mb-3" Style="max-height: 200px; overflow-y: auto; border-radius: 8px;">
                            @foreach (var user in _searchResults)
                            {
                                <MudPaper Elevation="2" Class="pa-3 mb-2" Style="border-radius: 8px;">
                                    <div class="d-flex justify-space-between align-center">
                                        <div class="d-flex align-center">
                                            <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">@user.FullName[0]</MudAvatar>
                                            <MudText>@user.FullName</MudText>
                                        </div>
                                        <MudIconButton Icon="@Icons.Material.Filled.PersonAdd" 
                                                      Size="Size.Small"
                                                      Color="Color.Secondary"
                                                      Variant="Variant.Filled"
                                                      Class="ml-2"
                                                      OnClick="() => AddUserToParticipants(user)" />
                                    </div>
                                </MudPaper>
                            }
                        </MudPaper>
                    }
                    else if (!string.IsNullOrEmpty(_searchQuery))
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-3" Style="border-radius: 8px;">
                            No users found matching your search
                        </MudAlert>
                    }
                    
                    @if (_selectedParticipants.Any())
                    {
                        <MudDivider Class="my-3" />
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">Selected Participants</MudText>
                            <MudChip T="string" Color="Color.Secondary" Size="Size.Small">@_selectedParticipants.Count</MudChip>
                        </div>
                        
                        <MudPaper Elevation="0" Class="pa-2" Style="max-height: 200px; overflow-y: auto; border-radius: 8px;">
                            @foreach (var participant in _selectedParticipants)
                            {
                                <MudPaper Elevation="2" Class="pa-3 mb-2" Style="border-radius: 8px;">
                                    <div class="d-flex justify-space-between align-center">
                                        <div class="d-flex align-center">
                                            <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="mr-2">@participant.FullName[0]</MudAvatar>
                                            <MudText>@participant.FullName</MudText>
                                        </div>
                                        <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" 
                                                      Size="Size.Small"
                                                      Color="Color.Error"
                                                      Variant="Variant.Filled"
                                                      Class="ml-2"
                                                      OnClick="() => RemoveUserFromParticipants(participant)" />
                                    </div>
                                </MudPaper>
                            }
                        </MudPaper>
                    }
                </MudCardContent>
            </MudCard>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Secondary" 
                  StartIcon="@Icons.Material.Filled.Add"
                  Disabled="@(!_isFormValid || _isCreating || !_selectedParticipants.Any())" 
                  OnClick="CreateChat">
            @if (_isCreating)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Color="Color.Surface" Indeterminate="true" />
                <span>Creating...</span>
            }
            else
            {
                <span>Create Chat</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference MudDialog { get; set; } = null!;
    [Parameter] public EventCallback<ChatRoom> OnChatCreated { get; set; }

    private MudForm _form = null!;
    private bool _isFormValid;
    private string _chatName = string.Empty;
    private string _searchQuery = string.Empty;
    private bool _isSearching = false;
    private bool _isCreating = false;
    private List<User> _allUsers = new();
    private List<User> _searchResults = new();
    private List<User> _selectedParticipants = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAllUsers();
    }

    private async Task LoadAllUsers()
    {
        try
        {
            _isSearching = true;
            _allUsers = await UserService.GetUsersAsync();
            
            // Filter out current user
            _allUsers = _allUsers
                .Where(u => u.Id != AuthService.CurrentUser?.Id)
                .ToList();
            
            _isSearching = false;
        }
        catch (Exception ex)
        {
            _isSearching = false;
            Snackbar.Add($"Error loading users: {ex.Message}", Severity.Error);
        }
    }

    private async Task SearchUsers()
    {
        try
        {
            _isSearching = true;
            await Task.Delay(1); // Force UI update
            
            if (string.IsNullOrWhiteSpace(_searchQuery))
            {
                _searchResults = new List<User>();
            }
            else
            {
                // Filter users based on search query and exclude already selected participants
                _searchResults = _allUsers
                    .Where(u => (u.FullName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) || 
                               u.UserName.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                               !_selectedParticipants.Any(p => p.Id == u.Id))
                    .ToList();
            }
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    private void AddUserToParticipants(User user)
    {
        if (!_selectedParticipants.Any(p => p.Id == user.Id))
        {
            _selectedParticipants.Add(user);
            _searchResults.Remove(user);
            
            // Clear search after adding
            _searchQuery = string.Empty;
            _searchResults.Clear();
        }
    }

    private void RemoveUserFromParticipants(User user)
    {
        _selectedParticipants.RemoveAll(p => p.Id == user.Id);
    }

    private async Task CreateChat()
    {
        try
        {
            await _form.Validate();
            if (!_isFormValid || !_selectedParticipants.Any()) return;
            
            _isCreating = true;
            
            // Get selected user IDs
            var selectedUserIds = _selectedParticipants.Select(u => u.Id).ToList();
            
            // Add current user to participants
            if (AuthService.CurrentUser != null)
            {
                selectedUserIds.Add(AuthService.CurrentUser.Id);
            }
            
            var createChatRoom = new CreateChatRoom
            {
                Name = _chatName,
                UserIds = selectedUserIds
            };
            
            var newChatRoom = await ChatService.CreateChatRoomAsync(createChatRoom);
            
            await OnChatCreated.InvokeAsync(newChatRoom);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating chat: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isCreating = false;
        }
    }
}